//Bubble Blast

function void releaseDropDash()
{
    if !(global.xtrachar == 202)
    {
        base.releaseDropDash()
        return
    }
    //Bouncy boy
    SonicLandingBubbleBounce()

	// Release drop dash!

	// Show dust cloud
	if (char.drown_countdown >= 12 && abs(s8(char.rotation)) < 0x1c)
	{
		u8[A6 + 0x20] = 0x02
		u16[A6 + 0x10] = char.position.x.u16
		u16[A6 + 0x14] = char.position.y.u16
		u8[A6 + 0x23] = 0x01
		u8[A6 + 0x2a] = char.flags & char.flag.FACING_LEFT
	}

	s16 dy = s8(14 - char.hitbox_extends.y)
	char.hitbox_extends.x = 7
	char.hitbox_extends.y = 14
	char.position.y.u16 += global.inv_gravity ? dy : -dy

	char.state = char.state.ROLLING
	char.flags |= char.flag.ROLLING
	char.spindash = 0

	sonic.dropdash_counter = 0
	if (control.player1.state & CONTROL_LEFT)
	{
		char.flags |= char.flag.FACING_LEFT
	}
	else if (control.player1.state & CONTROL_RIGHT)
	{
		char.flags &= ~char.flag.FACING_LEFT
	}

	// Camera delay
	if (A0 == 0xffffb000)
	{
		ClearPositionBackup()
		camera.locktime.player1 = 0x0c00
	}
	else
	{
		camera.locktime.player2 = 0x0c00
	}

	s16 baseSpeed = super.active ? 0x0c00 : 0x0800
	s16 maxSpeed  = super.active ? 0x0d00 : 0x0c00
	if ((char.flags & char.flag.FACING_LEFT) == 0)
	{
		if (char.velocity.x > 0)
		{
			char.velocity.x = min(baseSpeed + (char.velocity.x >> 2), maxSpeed)
		}
		else if (char.rotation != 0)
		{
			char.velocity.x = baseSpeed + (char.velocity.x >> 1)
		}
		else
		{
			char.velocity.x = baseSpeed
		}
	}
	else
	{
		baseSpeed = -baseSpeed
		if (char.velocity.x < 0)
		{
			char.velocity.x = max(baseSpeed + (char.velocity.x >> 2), -maxSpeed)
		}
		else if (char.rotation != 0)
		{
			char.velocity.x = baseSpeed + (char.velocity.x >> 1)
		}
		else
		{
			char.velocity.x = baseSpeed
		}
	}

	if (super.active)
	{
		// Using upper byte to signal the difference between Hyper Knuckles hitting the wall and Super/Hyper Sonic's drop dash
		camera.hyper_knux_shake = 0x0114

		Character.ClearEnemiesOnScreen()
		playSound(0x49)
	}

	Audio.playAudio("dropdash_release", AudioContext.CONTEXT_SOUND)

}

function bool Character.updateSuperPeelout()
{
    if !(global.xtrachar == 202)
    {
        return base.Character.updateSuperPeelout()
    }

	u8 input_state   = control.player1.state
	u8 input_pressed = control.player1.pressed

	if (char.spindash == 0)
	{
		bool canStartPeelout = (char.state == char.state.LOOKING_UP) && (input_pressed & CONTROL_ABC) && (player1.control_override == 0)	// Last check is needed in cutscenes (e.g. end of MHZ 2)
		if (!canStartPeelout)
		{
			// Nothing to see here
			return false
		}

		char.state = char.state.RUNNING
		char.spindash = 0x80
		char.spindash_charge = 0
		Audio.playAudio("peelout_charge", AudioContext.CONTEXT_SOUND)
	}
	else if (char.spindash == 0x80)
	{
		if (input_state & CONTROL_UP)
		{
			// Charge up
			char.spindash_charge = clamp(char.spindash_charge + 0x40, 0x100, 0x800)
			if (char.flags & char.flag.UNDERWATER)
			{
				char.groundspeed = 0x300 + ((super.active) ? (char.spindash_charge) : (char.spindash_charge * 3/4))
			}
			else
			{
				char.groundspeed = 0x400 + ((super.active) ? (char.spindash_charge * 3/2) : (char.spindash_charge))
			}

			char.flags &= ~char.flag.PUSHING
			if (abs(char.groundspeed) >= 0x0a00)
				sonic.fastrunanim.timer = 30

		}
		else
		{
			releaseSuperPeelout()
			if (abs(char.groundspeed) > 0x0800 && !(char.bonus_effect & char.bonus.INVINCIBLE))
			{
				if (super.active == 0 && super.active.tails == 0 && !(char.bonus_effect & char.bonus.INVINCIBLE))
				{
					char.bonus_effect |= char.bonus.INVINCIBLE
					
					if (abs(char.groundspeed) == 0x0c00)
					{
						char.invinc.countdown = 1
					}
					else
					{
						char.invinc.countdown = 1
					}

				}
            }
		}

		// Center camera y-offset again
		centerCameraYOffset()
	}

	Character.CheckAgainstMoveBorders()
	Character.UpdateRotationOnGround()
	partialUpdateCharacterOnGround()

	return true
}